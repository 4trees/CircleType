(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CircleType = undefined;

var _class = __webpack_require__(1);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.CircleType = _class2.default;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * CircleType 2.0.0
 * Peter Hrynkow
 * Copyright 2014, Licensed GPL & MIT
 *
*/

/* globals $ */

var vendors = ['webkit', 'Moz', 'O', 'ms'];
var PI = Math.PI,
    floor = Math.floor,
    abs = Math.abs;

/**
 * Converts radians to degrees.
 *
 * @param  {Number} radians A radians value.
 *
 * @return {Number}         A degrees value.
 */

var radiansToDegrees = function radiansToDegrees(radians) {
  return radians * (180 / PI);
};

/**
 * Gets an elementâ€™s bounds relative to the document.
 *
 * @param  {HTMLElement} elem An element.
 *
 * @return {Object}
 */
var getBounds = function getBounds(elem) {
  var _elem$getBoundingClie = elem.getBoundingClientRect(),
      top = _elem$getBoundingClie.top,
      left = _elem$getBoundingClie.left,
      width = _elem$getBoundingClie.width,
      height = _elem$getBoundingClie.height;

  return {
    top: top + window.pageYOffset,
    left: left + window.pageXOffset,
    width: width,
    height: height
  };
};

/**
 * Splits `text` into individual span elements.
 *
 * @param  {String} text  A string of text to convert.
 *
 * @return {Array}        An array of letter elements.
 */
var getLetters = function getLetters(text) {
  return text.trim().split('').map(function (letter) {
    var span = document.createElement('span');
    var style = span.style;


    style.position = 'absolute';
    style.left = '50%';

    span.innerHTML = letter === ' ' ? '&nbsp;' : letter;

    return span;
  });
};

/**
 * Gets the combined height of all letter elements.
 *
 * @param  {Array} letters  An array of letter elements.
 *
 * @return {Number}         The total height.
 */
var getHeight = function getHeight(letters) {
  var center = floor(letters.length / 2);
  var mid = getBounds(letters[center]);
  var first = getBounds(letters[0]);
  var height = first.height + abs(first.top - mid.top);

  return height;
};

/**
 * A CircleType instance creates a circular text _elem
 *
 * @param  {HTMLElement} elem A target HTML element.
 */

var CircleType = function () {
  function CircleType(elem) {
    _classCallCheck(this, CircleType);

    this._dir = 1;
    this._elem = elem;
    this.originalHTML = this._elem.innerHTML;

    this.invalidate();
  }

  /**
   * Gets or sets the _radius.
   *
   * @param  {Number=} value A _radius value
   *
   * @return {Number}        The _radius
   */


  _createClass(CircleType, [{
    key: 'radius',
    value: function radius(value) {
      if (typeof value !== 'undefined') {
        this.__radius = value;

        this.invalidate();
      }

      return this.__radius;
    }

    /**
     * Gets or sets the direction.
     *
     * @param  {Number=} value A direction value (1|-1)
     *
     * @return {Number}        The direction
     */

  }, {
    key: 'dir',
    value: function dir(value) {
      if (typeof value !== 'undefined') {
        this._dir = value;

        this.invalidate();
      }

      return this._dir;
    }

    /**
     * Invalidates the current state, scheduling a task to rebuild the effect.
     *
     * @return {CircleType} This instance.
     */

  }, {
    key: 'invalidate',
    value: function invalidate() {
      var _this = this;

      requestAnimationFrame(function () {
        _this.destroy().build();
      });

      return this;
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      return this.invalidate();
    }

    /**
     * Removes the CircleType effect from the element, restoring it to its
     * original state.
     *
     * @return {CircleType} This instance.
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this._elem.innerHTML = this.originalHTML;
      this._elem.circleTypeInstance = null;

      return this;
    }

    /**
     * Builds the elements neccessary for the effect.
     *
     * @return {CircleType} This instance.
     */

  }, {
    key: 'build',
    value: function build() {
      var _this2 = this;

      var txt = this._elem.innerText;

      var container = document.createElement('div');
      container.setAttribute('aria-label', txt);
      container.style.position = 'relative';

      this._letters = getLetters(txt);
      this._elem.innerHTML = '';
      this._elem.appendChild(container);

      this.container = container;

      this._letters.forEach(function (letter) {
        var style = letter.style;


        style.bottom = _this2._dir === -1 ? 0 : 'auto';

        container.appendChild(letter);
      });

      var _window$getComputedSt = window.getComputedStyle(this._elem),
          fontSize = _window$getComputedSt.fontSize,
          lineHeight = _window$getComputedSt.lineHeight;

      this._fontSize = parseInt(fontSize, 10);
      this._lineHeight = parseInt(lineHeight, 10) || this._fontSize;

      this._metrics = this._letters.map(getBounds);

      var totalWidth = this._metrics.reduce(function (sum, _ref) {
        var width = _ref.width;
        return sum + width;
      }, 0);
      this._minRadius = totalWidth / PI / 2 + this._lineHeight;

      return this.layout();
    }

    /**
     * Rotates and positions the _letters.
     *
     * @private
     *
     * @return {CircleType} This instance.
     */

  }, {
    key: 'layout',
    value: function layout() {
      var _this3 = this;

      var finalRadius = !this._radius ? this._minRadius : this._radius;

      var originY = this._dir === -1 ? -finalRadius + this._lineHeight : finalRadius;

      var origin = 'center ' + originY / this._fontSize + 'em';

      var innerRadius = finalRadius - this._lineHeight;

      var _metrics$reduce = this._metrics.reduce(function (data, _ref2) {
        var width = _ref2.width;

        var rotation = radiansToDegrees(width / innerRadius);

        return {
          sum: data.sum + rotation,
          rotations: [].concat(_toConsumableArray(data.rotations), [data.sum + rotation / 2])
        };
      }, { sum: 0, rotations: [] }),
          rotations = _metrics$reduce.rotations,
          sum = _metrics$reduce.sum;

      this._letters.forEach(function (letter, index) {
        var style = letter.style;

        var rotate = (sum * -0.5 + rotations[index]) * _this3._dir;
        var translateX = _this3._metrics[index].width * -0.5 / _this3._fontSize;

        vendors.forEach(function (vendor) {
          style[vendor + 'Transform'] = 'translateX(' + translateX + 'em) rotate(' + rotate + 'deg)';
          style[vendor + 'TransformOrigin'] = origin;
        });
      });

      this.container.style.height = getHeight(this._letters) + 'px';

      return this;
    }
  }]);

  return CircleType;
}();

$.fn.circleType = function (options) {
  return this.each(function () {
    if (typeof options === 'string') {
      return this.circleTypeInstance[options]();
    }

    this.circleTypeInstance = new CircleType(this);

    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      this.circleTypeInstance.radius(options.radius);
      this.circleTypeInstance.dir(options.dir);
    }

    return this.circleTypeInstance;
  });
};

exports.default = CircleType;

/***/ })
/******/ ]);
});